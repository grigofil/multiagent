#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Confluence/JIRA
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ConfluenceJiraAnalystAgent –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–∞–º–∏
from src.agents.task_specific_agents import ConfluenceJiraAnalystAgent, TaskSpecificAgentFactory
from src.agents.base_agent import AgentConfig

console = Console()


class ConfluenceJiraAnalysisExample:
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Confluence/JIRA"""
    
    def __init__(self):
        self.console = Console()
        self.analyst_agent = None
        self.setup_agent()
    
    def setup_agent(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        config = AgentConfig(
            name="Confluence/JIRA Analyst",
            role="Data Analyst",
            description="–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Confluence –∏ JIRA",
            model={
                "provider": "openai",
                "model_name": "gpt-4",
                "temperature": 0.1,
                "max_tokens": 4000,
                "top_p": 0.9
            },
            system_prompt="""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Confluence –∏ JIRA.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã, –≤—ã—è–≤–ª—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
            –í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, actionable —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏.""",
            capabilities=[
                "data_analysis",
                "trend_analysis", 
                "collaboration_analysis",
                "project_health_assessment",
                "team_productivity_analysis"
            ],
            limitations=["cannot_access_real_apis", "works_with_mock_data"]
        )
        
        self.analyst_agent = ConfluenceJiraAnalystAgent(config, "demo-key")
    
    def generate_mock_jira_data(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö JIRA"""
        return {
            "project": "Multi-Agent System",
            "period": "Last 30 days",
            "issues": [
                {
                    "key": "PROJ-101",
                    "summary": "Implement base agent functionality",
                    "status": "Done",
                    "priority": "High",
                    "assignee": "Alice Johnson",
                    "created": "2024-01-15",
                    "resolved": "2024-01-20",
                    "story_points": 8,
                    "labels": ["backend", "core"]
                },
                {
                    "key": "PROJ-102", 
                    "summary": "Add agent communication system",
                    "status": "In Progress",
                    "priority": "High",
                    "assignee": "Bob Smith",
                    "created": "2024-01-18",
                    "resolved": None,
                    "story_points": 13,
                    "labels": ["communication", "core"]
                },
                {
                    "key": "PROJ-103",
                    "summary": "Create user interface",
                    "status": "To Do",
                    "priority": "Medium",
                    "assignee": "Carol Davis",
                    "created": "2024-01-20",
                    "resolved": None,
                    "story_points": 5,
                    "labels": ["frontend", "ui"]
                },
                {
                    "key": "PROJ-104",
                    "summary": "Write documentation",
                    "status": "Done",
                    "priority": "Low",
                    "assignee": "David Wilson",
                    "created": "2024-01-10",
                    "resolved": "2024-01-25",
                    "story_points": 3,
                    "labels": ["documentation"]
                },
                {
                    "key": "PROJ-105",
                    "summary": "Add unit tests",
                    "status": "In Progress",
                    "priority": "Medium",
                    "assignee": "Eve Brown",
                    "created": "2024-01-22",
                    "resolved": None,
                    "story_points": 8,
                    "labels": ["testing", "quality"]
                }
            ],
            "sprints": [
                {
                    "name": "Sprint 1",
                    "start_date": "2024-01-15",
                    "end_date": "2024-01-28",
                    "planned_points": 25,
                    "completed_points": 11
                }
            ]
        }
    
    def generate_mock_confluence_data(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö Confluence"""
        return {
            "space": "Multi-Agent System",
            "period": "Last 30 days",
            "pages": [
                {
                    "title": "System Architecture Overview",
                    "author": "Alice Johnson",
                    "created": "2024-01-15",
                    "updated": "2024-01-20",
                    "views": 45,
                    "likes": 8,
                    "comments": [
                        {"author": "Bob Smith", "content": "Great overview!", "date": "2024-01-16"},
                        {"author": "Carol Davis", "content": "Need more details on UI", "date": "2024-01-17"}
                    ],
                    "tags": ["architecture", "documentation"],
                    "word_count": 1200
                },
                {
                    "title": "API Documentation",
                    "author": "Bob Smith", 
                    "created": "2024-01-18",
                    "updated": "2024-01-22",
                    "views": 32,
                    "likes": 5,
                    "comments": [
                        {"author": "David Wilson", "content": "Very helpful!", "date": "2024-01-19"}
                    ],
                    "tags": ["api", "documentation"],
                    "word_count": 800
                },
                {
                    "title": "Development Guidelines",
                    "author": "Carol Davis",
                    "created": "2024-01-20",
                    "updated": "2024-01-25",
                    "views": 28,
                    "likes": 6,
                    "comments": [
                        {"author": "Eve Brown", "content": "Should add testing guidelines", "date": "2024-01-21"},
                        {"author": "Alice Johnson", "content": "Agreed, will update", "date": "2024-01-22"}
                    ],
                    "tags": ["guidelines", "development"],
                    "word_count": 600
                },
                {
                    "title": "Project Status Report",
                    "author": "David Wilson",
                    "created": "2024-01-25",
                    "updated": "2024-01-25",
                    "views": 15,
                    "likes": 3,
                    "comments": [],
                    "tags": ["status", "report"],
                    "word_count": 400
                }
            ]
        }
    
    def show_jira_analysis(self, jira_data: Dict[str, Any]):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö JIRA"""
        self.console.print("\n" + "="*80)
        self.console.print("üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• JIRA", style="bold blue")
        self.console.print("="*80)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = self.analyst_agent.extract_jira_metrics(jira_data)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        metrics_table = Table(title="–ú–µ—Ç—Ä–∏–∫–∏ JIRA")
        metrics_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        metrics_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        metrics_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="yellow")
        
        metrics_table.add_row(
            "–í—Å–µ–≥–æ –∑–∞–¥–∞—á",
            str(metrics["total_issues"]),
            "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ"
        )
        
        # –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
        status_summary = ", ".join([f"{status}: {count}" for status, count in metrics["by_status"].items()])
        metrics_table.add_row(
            "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
            status_summary,
            "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á"
        )
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        priority_summary = ", ".join([f"{priority}: {count}" for priority, count in metrics["by_priority"].items()])
        metrics_table.add_row(
            "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º",
            priority_summary,
            "–í–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á"
        )
        
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        assignee_summary = ", ".join([f"{assignee}: {count}" for assignee, count in metrics["by_assignee"].items()])
        metrics_table.add_row(
            "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º",
            assignee_summary,
            "–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É"
        )
        
        self.console.print(metrics_table)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∏–Ω—Ç–æ–≤
        if jira_data.get("sprints"):
            self.console.print("\nüèÉ –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∏–Ω—Ç–æ–≤:")
            sprint_table = Table()
            sprint_table.add_column("–°–ø—Ä–∏–Ω—Ç", style="cyan")
            sprint_table.add_column("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", style="green")
            sprint_table.add_column("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", style="yellow")
            sprint_table.add_column("–ü—Ä–æ–≥—Ä–µ—Å—Å", style="magenta")
            
            for sprint in jira_data["sprints"]:
                planned = sprint["planned_points"]
                completed = sprint["completed_points"]
                progress = (completed / planned * 100) if planned > 0 else 0
                
                sprint_table.add_row(
                    sprint["name"],
                    str(planned),
                    str(completed),
                    f"{progress:.1f}%"
                )
            
            self.console.print(sprint_table)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.console.print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        recommendations = [
            "üìà –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ",
            "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏",
            "üéØ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
            "üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ø—Ä–∏–Ω—Ç–æ–≤"
        ]
        
        for rec in recommendations:
            self.console.print(f"   {rec}")
    
    def show_confluence_analysis(self, confluence_data: Dict[str, Any]):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Confluence"""
        self.console.print("\n" + "="*80)
        self.console.print("üìö –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• CONFLUENCE", style="bold blue")
        self.console.print("="*80)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã
        insights = self.analyst_agent.extract_confluence_insights(confluence_data)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏
        insights_table = Table(title="–ò–Ω—Å–∞–π—Ç—ã Confluence")
        insights_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        insights_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        insights_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="yellow")
        
        insights_table.add_row(
            "–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü",
            str(insights["total_pages"]),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"
        )
        
        insights_table.add_row(
            "–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            str(insights["total_comments"]),
            "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–π"
        )
        
        # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã
        top_authors = sorted(insights["most_active_authors"].items(), key=lambda x: x[1], reverse=True)[:3]
        authors_summary = ", ".join([f"{author}: {count}" for author, count in top_authors])
        insights_table.add_row(
            "–¢–æ–ø –∞–≤—Ç–æ—Ä—ã",
            authors_summary,
            "–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
        )
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
        top_topics = sorted(insights["popular_topics"].items(), key=lambda x: x[1], reverse=True)[:3]
        topics_summary = ", ".join([f"{topic}: {count}" for topic, count in top_topics])
        insights_table.add_row(
            "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã",
            topics_summary,
            "–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–≥–∏"
        )
        
        self.console.print(insights_table)
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü
        self.console.print("\nüìÑ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü:")
        pages_table = Table()
        pages_table.add_column("–°—Ç—Ä–∞–Ω–∏—Ü–∞", style="cyan")
        pages_table.add_column("–ê–≤—Ç–æ—Ä", style="green")
        pages_table.add_column("–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", style="yellow")
        pages_table.add_column("–õ–∞–π–∫–∏", style="magenta")
        pages_table.add_column("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", style="blue")
        
        for page in confluence_data["pages"]:
            pages_table.add_row(
                page["title"][:30] + "..." if len(page["title"]) > 30 else page["title"],
                page["author"],
                str(page["views"]),
                str(page["likes"]),
                str(len(page["comments"]))
            )
        
        self.console.print(pages_table)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.console.print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        recommendations = [
            "üìù –ü–æ–æ—â—Ä—è—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã",
            "üí¨ –ê–∫—Ç–∏–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö",
            "üè∑Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            "üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        ]
        
        for rec in recommendations:
            self.console.print(f"   {rec}")
    
    async def run_comprehensive_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.console.print(Panel(
            "üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Confluence/JIRA\n\n"
            "–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:\n"
            "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö JIRA\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Confluence\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
            "‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            title="üìä –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö Confluence/JIRA",
            border_style="blue"
        ))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
        with self.console.status("[bold green]–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
            jira_data = self.generate_mock_jira_data()
            confluence_data = self.generate_mock_confluence_data()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ JIRA
        self.show_jira_analysis(jira_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Confluence
        self.show_confluence_analysis(confluence_data)
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
        self.console.print("\n" + "="*80)
        self.console.print("ü§ñ –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó –ò–ò –ê–ì–ï–ù–¢–ê", style="bold blue")
        self.console.print("="*80)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        analysis_request = {
            "data_source": "jira_confluence",
            "jira_data": jira_data,
            "confluence_data": confluence_data,
            "analysis_type": "comprehensive",
            "metrics": ["productivity", "collaboration", "documentation_quality"],
            "context": "–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        }
        
        with self.console.status("[bold green]–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò –∞–≥–µ–Ω—Ç–∞..."):
            try:
                # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                ai_analysis = """## –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- **–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã**: 44% –æ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ —Å–ø—Ä–∏–Ω—Ç–µ
- **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏**: 4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞ 30 –¥–Ω–µ–π
- **–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å**: 8 –ª–∞–π–∫–æ–≤ –∏ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

### üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã:
1. **–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–ø—Ä–∏–Ω—Ç–∞**: –ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ 56%
2. **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
3. **–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è**: –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö

### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. **–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è**: –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
2. **–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è**: –£–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö
3. **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
4. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ø—Ä–∏–Ω—Ç–æ–≤

### üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
- –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É —Å–ø—Ä–∏–Ω—Ç–∞
- –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏ –∑–∞–¥–∞—á
- –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
                
                self.console.print(Panel(ai_analysis, title="ü§ñ –ê–Ω–∞–ª–∏–∑ –ò–ò –∞–≥–µ–Ω—Ç–∞", border_style="green"))
                
            except Exception as e:
                self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", style="red")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        self.console.print("\n" + "="*80)
        self.console.print("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê", style="bold blue")
        self.console.print("="*80)
        
        summary_table = Table()
        summary_table.add_column("–ê—Å–ø–µ–∫—Ç", style="cyan")
        summary_table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
        summary_table.add_column("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", style="yellow")
        
        summary_table.add_row(
            "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è",
            "–£–ª—É—á—à–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–æ–≤"
        )
        summary_table.add_row(
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "‚úÖ –•–æ—Ä–æ—à–æ",
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        )
        summary_table.add_row(
            "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
            "üü° –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ",
            "–£–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö"
        )
        summary_table.add_row(
            "–ö–∞—á–µ—Å—Ç–≤–æ",
            "‚úÖ –•–æ—Ä–æ—à–æ",
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã"
        )
        
        self.console.print(summary_table)
        
        self.console.print("\nüéØ –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Confluence/JIRA!")
        self.console.print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ConfluenceJiraAnalystAgent –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ Confluence/JIRA...")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
    example = ConfluenceJiraAnalysisExample()
    asyncio.run(example.run_comprehensive_analysis())


if __name__ == "__main__":
    main() 