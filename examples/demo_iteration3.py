"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3: –ú–µ—Ö–∞–Ω–∏–∑–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ API –∫–ª—é—á–∞
"""
import asyncio
import os
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

from src.workflow import AgentRouter, InteractionLogger, LangGraphWorkflowManager, Message, MessageType, RoutingRule, RoutingStrategy
from src.utils.advanced_config_loader import AdvancedConfigLoader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
console = Console()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    console.print(Panel.fit("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3: –ú–µ—Ö–∞–Ω–∏–∑–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤", style="bold blue"))
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        config_loader = AdvancedConfigLoader()
        agent_router = AgentRouter(config_loader)
        interaction_logger = InteractionLogger("demo_logs")
        langgraph_workflow_manager = LangGraphWorkflowManager(agent_router, interaction_logger)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs("demo_logs", exist_ok=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        await show_system_info(agent_router, langgraph_workflow_manager)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        await demonstrate_routing(agent_router, interaction_logger)
        await demonstrate_workflows(langgraph_workflow_manager, interaction_logger)
        await demonstrate_logging(interaction_logger)
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")


async def show_system_info(agent_router: AgentRouter, langgraph_workflow_manager: LangGraphWorkflowManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    console.print("\n[bold green]üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:[/bold green]")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–µ
    router_stats = agent_router.get_stats()
    router_table = Table(title="üì° –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤")
    router_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
    router_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    
    router_table.add_row("–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", str(router_stats["messages_processed"]))
    router_table.add_row("–°–æ–æ–±—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", str(router_stats["messages_routed"]))
    router_table.add_row("–û—à–∏–±–æ–∫", str(router_stats["errors"]))
    router_table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{router_stats['avg_processing_time']:.2f}—Å")
    router_table.add_row("–ü—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏", str(len(agent_router.routing_rules)))
    
    console.print(router_table)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LangGraph —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
    langgraph_workflows = langgraph_workflow_manager.get_available_workflows()
    langgraph_table = Table(title="üîÑ LangGraph —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
    langgraph_table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan")
    langgraph_table.add_column("–£–∑–ª—ã", style="green")
    langgraph_table.add_column("–£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã", style="yellow")
    
    for workflow_name in langgraph_workflows:
        info = langgraph_workflow_manager.get_workflow_info(workflow_name)
        langgraph_table.add_row(
            workflow_name,
            str(len(info.get("nodes", []))),
            "–î–∞" if info.get("has_conditional_edges", False) else "–ù–µ—Ç"
        )
    
    console.print(langgraph_table)


async def demonstrate_routing(agent_router: AgentRouter, interaction_logger: InteractionLogger):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    console.print("\n[bold blue]üì° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:[/bold blue]")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    class MockAgent:
        def __init__(self, name):
            self.name = name
            self.processed_messages = []
        
        async def process(self, message):
            self.processed_messages.append(message)
            return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {self.name}"
    
    agent_router.agents = {
        "analyst": MockAgent("analyst"),
        "coder": MockAgent("coder"),
        "reviewer": MockAgent("reviewer"),
        "manager": MockAgent("manager"),
        "ideator": MockAgent("ideator"),
        "assessor": MockAgent("assessor")
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    agent_router.add_default_routing_rules()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = [
        Message(
            id="msg_001",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª –∏ –≤—ã—è–≤–∏ —Ç—Ä–µ–Ω–¥—ã"
        ),
        Message(
            id="msg_002",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"
        ),
        Message(
            id="msg_003",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–ü—Ä–æ–≤–µ–¥–∏ —Ä–µ–≤—å—é –∫–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        ),
        Message(
            id="msg_004",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        ),
        Message(
            id="msg_005",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–ì–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"
        ),
        Message(
            id="msg_006",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        )
    ]
    
    routing_table = Table(title="üì® –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
    routing_table.add_column("–°–æ–æ–±—â–µ–Ω–∏–µ", style="cyan")
    routing_table.add_column("–¢–∏–ø", style="green")
    routing_table.add_column("–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫", style="yellow")
    routing_table.add_column("–°—Ç—Ä–∞—Ç–µ–≥–∏—è", style="magenta")
    
    for message in messages:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        interaction_logger.log_interaction(
            message=message,
            response=None,
            processing_time=0.0,
            error=None
        )
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        routed_messages = await agent_router.route_message(message)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        strategy = "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è"
        if len(routed_messages) > 1:
            strategy = "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è"
        
        routing_table.add_row(
            message.content[:40] + "...",
            message.message_type.value,
            ", ".join([", ".join(msg.recipients) for msg in routed_messages]),
            strategy
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for routed_msg in routed_messages:
            response_message = Message(
                id=f"response_{routed_msg.id}",
                sender=routed_msg.recipients[0] if routed_msg.recipients else "unknown",
                recipients=[routed_msg.sender],
                message_type=MessageType.RESULT,
                content=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {routed_msg.recipients[0] if routed_msg.recipients else 'unknown'}"
            )
            interaction_logger.log_interaction(
                message=routed_msg,
                response=response_message,
                processing_time=0.1,
                error=None
            )
    
    console.print(routing_table)


async def demonstrate_workflows(langgraph_workflow_manager: LangGraphWorkflowManager, interaction_logger: InteractionLogger):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LangGraph —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    console.print("\n[bold blue]üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LangGraph —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:[/bold blue]")
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    workflows = {
        "data_analysis": langgraph_workflow_manager.create_data_analysis_workflow(),
        "code_development": langgraph_workflow_manager.create_code_development_workflow(),
        "project_management": langgraph_workflow_manager.create_project_management_workflow()
    }
    
    for name, workflow in workflows.items():
        langgraph_workflow_manager.register_workflow(f"demo_{name}", workflow)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    test_data = {
        "data_analysis": {
            "data": {
                "sales": [120, 180, 220, 190, 280],
                "months": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π"]
            }
        },
        "code_development": {
            "requirements": "–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
        },
        "project_management": {
            "project_name": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏",
            "requirements": "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏"
        }
    }
    
    workflow_table = Table(title="üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    workflow_table.add_column("–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å", style="cyan")
    workflow_table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    workflow_table.add_column("–®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", style="yellow")
    workflow_table.add_column("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", style="magenta")
    
    for workflow_name, data in test_data.items():
        start_time = datetime.now()
        
        try:
            result = await langgraph_workflow_manager.run_workflow(f"demo_{workflow_name}", data)
            
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            if isinstance(result, dict) and 'step_results' in result:
                status = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
                steps_count = len(result['step_results'])
            else:
                status = "‚ùå –û—à–∏–±–∫–∞"
                steps_count = 0
            
            workflow_table.add_row(
                workflow_name.replace("_", " ").title(),
                status,
                str(steps_count),
                f"{execution_time:.2f}—Å"
            )
            
        except Exception as e:
            workflow_table.add_row(
                workflow_name.replace("_", " ").title(),
                "‚ùå –û—à–∏–±–∫–∞",
                "0",
                "N/A"
            )
    
    console.print(workflow_table)


async def demonstrate_logging(interaction_logger: InteractionLogger):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    console.print("\n[bold blue]üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:[/bold blue]")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = interaction_logger.get_system_health()
    
    stats_table = Table(title="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    stats_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
    stats_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    
    stats_table.add_row("–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π", str(stats['total_interactions']))
    stats_table.add_row("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö", f"{stats['success_rate']*100:.1f}%")
    stats_table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{stats['avg_response_time']:.2f}—Å")
    stats_table.add_row("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤", str(stats['active_agents']))
    stats_table.add_row("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", f"{stats['uptime']:.1f}—Å")
    stats_table.add_row("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", stats['last_activity'] or "–ù–µ—Ç")
    
    console.print(stats_table)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    history = interaction_logger.get_interaction_history(limit=5)
    
    if history:
        history_table = Table(title="üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
        history_table.add_column("–í—Ä–µ–º—è", style="cyan")
        history_table.add_column("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", style="green")
        history_table.add_column("–ü–æ–ª—É—á–∞—Ç–µ–ª–∏", style="yellow")
        history_table.add_column("–¢–∏–ø", style="magenta")
        history_table.add_column("–°—Ç–∞—Ç—É—Å", style="blue")
        
        for interaction in history:
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if not interaction.get('error') else "‚ùå –û—à–∏–±–∫–∞"
            history_table.add_row(
                interaction['timestamp'][:19],
                interaction['sender'],
                ", ".join(interaction['recipients']),
                interaction['message_type'],
                status
            )
        
        console.print(history_table)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    try:
        report = interaction_logger.generate_report()
        console.print(f"\n[green]üìÑ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:[/green] {len(report)} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}[/red]")


if __name__ == "__main__":
    asyncio.run(main()) 