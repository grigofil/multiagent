"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import os
from dotenv import load_dotenv
from loguru import logger
from rich.console import Console
from rich.panel import Panel

from src.workflow import MultiAgentWorkflow
from src.utils import ConfigLoader, get_api_key

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

console = Console()


async def example_data_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    console.print(Panel.fit("üìä –ü—Ä–∏–º–µ—Ä: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", style="bold green"))
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_loader = ConfigLoader()
        api_key = get_api_key()
        
        if not api_key:
            console.print("[red]‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω![/red]")
            return
        
        workflow_manager = MultiAgentWorkflow(config_loader, api_key)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        sample_data = {
            "data_input": {
                "company": "TechCorp",
                "quarterly_revenue": [1200000, 1350000, 1420000, 1580000],
                "quarters": ["Q1", "Q2", "Q3", "Q4"],
                "expenses": [800000, 850000, 900000, 950000],
                "target_growth": 0.15
            }
        }
        
        console.print("[yellow]üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏...[/yellow]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        result = await workflow_manager.run_workflow("data_analysis_workflow", sample_data)
        
        if result["success"]:
            console.print("[green]‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
            
            analysis_result = result["context"].get("analysis_result", "")
            console.print(f"\n[bold]–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:[/bold]\n{analysis_result}")
            
        else:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {result.get('error')}[/red]")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")


async def example_code_development():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ —Å —Ä–µ–≤—å—é"""
    console.print(Panel.fit("üíª –ü—Ä–∏–º–µ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞", style="bold blue"))
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_loader = ConfigLoader()
        api_key = get_api_key()
        
        if not api_key:
            console.print("[red]‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω![/red]")
            return
        
        workflow_manager = MultiAgentWorkflow(config_loader, api_key)
        
        # –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        coding_task = {
            "task_description": """
            –°–æ–∑–¥–∞–π Python –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω:
            1. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            2. –í—ã–ø–æ–ª–Ω—è—Ç—å CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ (Create, Read, Update, Delete)
            3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            5. –í–∫–ª—é—á–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
            """,
            "requirements": "–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ Python, –¥–æ–±–∞–≤—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
        }
        
        console.print("[yellow]üîß –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...[/yellow]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–µ–≤—å—é
        result = await workflow_manager.run_workflow("code_review_workflow", coding_task)
        
        if result["success"]:
            console.print("[green]‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ![/green]")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à–∞–≥–∞–º
            for i, message in enumerate(result["messages"], 1):
                console.print(f"\n[bold cyan]–®–∞–≥ {i}: {message['agent']}[/bold cyan]")
                
                if message['agent'] == 'coder':
                    console.print("[green]–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:[/green]")
                    code_output = str(message['output'])
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∫–æ–¥–∞
                    console.print(code_output[:500] + "..." if len(code_output) > 500 else code_output)
                
                elif message['agent'] == 'reviewer':
                    console.print("[yellow]–†–µ–≤—å—é –∫–æ–¥–∞:[/yellow]")
                    review_output = str(message['output'])
                    console.print(review_output[:300] + "..." if len(review_output) > 300 else review_output)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_code = result["context"].get("improved_code", "")
            if final_code:
                console.print(f"\n[bold green]üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥:[/bold green]")
                console.print(final_code[:800] + "..." if len(final_code) > 800 else final_code)
                
        else:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {result.get('error')}[/red]")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞: {e}")
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")


async def example_project_management():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º"""
    console.print(Panel.fit("üìã –ü—Ä–∏–º–µ—Ä: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º", style="bold magenta"))
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_loader = ConfigLoader()
        api_key = get_api_key()
        
        if not api_key:
            console.print("[red]‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω![/red]")
            return
        
        workflow_manager = MultiAgentWorkflow(config_loader, api_key)
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_data = {
            "data_input": {
                "project_name": "E-commerce Platform",
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏",
                "team_size": 8,
                "deadline": "6 –º–µ—Å—è—Ü–µ–≤",
                "budget": "$500,000",
                "technologies": ["React", "Node.js", "PostgreSQL", "Redis"],
                "key_features": [
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                    "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
                    "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫",
                    "–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π",
                    "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                    "API –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
                ]
            }
        }
        
        console.print("[yellow]üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç –∏ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...[/yellow]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        result = await workflow_manager.run_workflow("data_analysis_workflow", project_data)
        
        if result["success"]:
            console.print("[green]‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
            
            analysis_result = result["context"].get("analysis_result", "")
            console.print(f"\n[bold]–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞:[/bold]\n{analysis_result}")
            
        else:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {result.get('error')}[/red]")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º: {e}")
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    console.print(Panel.fit("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", style="bold blue"))
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs("logs", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    await example_data_analysis()
    console.print("\n" + "="*80 + "\n")
    
    await example_code_development()
    console.print("\n" + "="*80 + "\n")
    
    await example_project_management()


if __name__ == "__main__":
    asyncio.run(main()) 