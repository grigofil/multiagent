#!/usr/bin/env python3
"""
–î–µ–º–æ-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ù–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
- –°–∏—Å—Ç–µ–º—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
- –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–ª–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import yaml
from pathlib import Path
from typing import Dict, Any, List
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Confirm, Prompt
from rich.syntax import Syntax

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
from src.agents.base_agent import AgentConfig
from src.agents.extended_agents import (
    DatabaseAgent, ImageAnalysisAgent, APIAgent, MachineLearningAgent,
    SecurityAgent, DevOpsAgent, DocumentationAgent, TestingAgent,
    ResearchAgent, CommunicationAgent, ExtendedAgentFactory
)
from src.agents.agent_templates import (
    AgentTemplateManager, DynamicAgentCreator, UniversalAgent, AgentRoleManager
)
from src.agents.specialized_agents import AgentFactory
from src.workflow.agent_router import AgentRouter
from src.workflow.interaction_logger import InteractionLogger
from src.workflow.langgraph_integration import LangGraphWorkflowManager

console = Console()


class Iteration4Demo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4"""
    
    def __init__(self):
        self.console = Console()
        self.template_manager = AgentTemplateManager()
        self.role_manager = AgentRoleManager()
        self.agent_creator = DynamicAgentCreator(self.template_manager)
        self.interaction_logger = InteractionLogger()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
        self._register_extended_agents()
    
    def _register_extended_agents(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–æ–∑–¥–∞—Ç–µ–ª–µ"""
        from src.agents.extended_agents import (
            DatabaseAgent, ImageAnalysisAgent, APIAgent, MachineLearningAgent,
            SecurityAgent, DevOpsAgent, DocumentationAgent, TestingAgent,
            ResearchAgent, CommunicationAgent
        )
        
        agent_classes = {
            "database": DatabaseAgent,
            "image_analysis": ImageAnalysisAgent,
            "api": APIAgent,
            "ml": MachineLearningAgent,
            "security": SecurityAgent,
            "devops": DevOpsAgent,
            "documentation": DocumentationAgent,
            "testing": TestingAgent,
            "research": ResearchAgent,
            "communication": CommunicationAgent
        }
        
        for agent_type, agent_class in agent_classes.items():
            self.agent_creator.register_agent_type(agent_type, agent_class)
    
    def show_welcome(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_text = """
        üöÄ –ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ4: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        
        –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        ‚Ä¢ 10 –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        ‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
        ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        ‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
        """
        
        self.console.print(Panel(welcome_text, title="üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4", border_style="blue"))
    
    def show_agent_overview(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        self.console.print("\n" + "="*80)
        self.console.print("üìä –û–ë–ó–û–† –î–û–°–¢–£–ü–ù–´–• –ê–ì–ï–ù–¢–û–í", style="bold blue")
        self.console.print("="*80)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤
        all_agent_types = AgentFactory.get_available_agent_types()
        categories = ExtendedAgentFactory.get_agent_categories()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        table.add_column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", style="cyan", no_wrap=True)
        table.add_column("–ê–≥–µ–Ω—Ç—ã", style="green")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="yellow")
        
        category_descriptions = {
            "analysis": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
            "development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
            "specialized": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏",
            "creative": "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"
        }
        
        for category, agents in categories.items():
            agent_list = ", ".join(agents)
            description = category_descriptions.get(category, "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
            table.add_row(category.title(), agent_list, description)
        
        self.console.print(table)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.console.print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ {len(all_agent_types)} —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
    
    def show_extended_agents_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        self.console.print("\n" + "="*80)
        self.console.print("üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–°–®–ò–†–ï–ù–ù–´–• –ê–ì–ï–ù–¢–û–í", style="bold blue")
        self.console.print("="*80)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        base_config = AgentConfig(
            name="Demo Agent",
            role="Demo Role",
            description="Demo Description",
            model={
                "provider": "openai",
                "model_name": "gpt-4",
                "temperature": 0.2,
                "max_tokens": 4000,
                "top_p": 0.9
            },
            system_prompt="You are a demo agent for testing purposes.",
            capabilities=["demo_capability"],
            limitations=["demo_limitation"]
        )
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        demo_agents = [
            ("Database Agent", "database", {
                "query_type": "select",
                "table": "users",
                "columns": "id, name, email",
                "conditions": "active = true",
                "database_type": "postgresql"
            }),
            ("ML Agent", "ml", {
                "task_type": "classification",
                "algorithm": "random_forest",
                "data_description": "Customer data for churn prediction",
                "hyperparameters": {"n_estimators": 100, "max_depth": 10}
            }),
            ("Security Agent", "security", {
                "security_type": "code_analysis",
                "target": "web_application",
                "vulnerability_types": ["sql_injection", "xss", "csrf"],
                "severity_level": "high"
            }),
            ("DevOps Agent", "devops", {
                "devops_task": "deployment",
                "platform": "kubernetes",
                "environment": "production",
                "tools": ["docker", "helm", "terraform"]
            })
        ]
        
        for agent_name, agent_type, input_data in demo_agents:
            self.console.print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {agent_name}...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                agent = self.agent_creator.create_dynamic_agent(base_config, "demo-key")
                
                # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                mock_response = f"‚úÖ {agent_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å: {str(input_data)[:50]}..."
                
                self.console.print(f"   üì§ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(input_data)[:80]}...")
                self.console.print(f"   üì• –û—Ç–≤–µ—Ç: {mock_response}")
                self.console.print(f"   ‚úÖ {agent_name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
            except Exception as e:
                self.console.print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ {agent_name}: {e}", style="red")
    
    def show_template_system_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤"""
        self.console.print("\n" + "="*80)
        self.console.print("üé® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –®–ê–ë–õ–û–ù–û–í", style="bold blue")
        self.console.print("="*80)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        templates = self.template_manager.list_templates()
        
        if not templates:
            self.console.print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            self.template_manager.create_default_templates()
            self.template_manager.load_templates()
            templates = self.template_manager.list_templates()
        
        self.console.print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã ({len(templates)}):")
        
        template_table = Table()
        template_table.add_column("–®–∞–±–ª–æ–Ω", style="cyan")
        template_table.add_column("–ë–∞–∑–æ–≤—ã–π —Ç–∏–ø", style="green")
        template_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="yellow")
        
        for template_name in templates:
            template = self.template_manager.get_template(template_name)
            if template:
                template_table.add_row(
                    template.name,
                    template.base_type,
                    template.description
                )
        
        self.console.print(template_table)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        self.console.print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ 'junior_analyst':")
        
        try:
            # –ú–æ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with self.console.status("[bold green]–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞..."):
                mock_base_config = {
                    "name": "Junior Data Analyst",
                    "role": "Data Analyst",
                    "description": "Junior data analyst for basic tasks",
                    "model": {
                        "provider": "openai",
                        "model_name": "gpt-4",
                        "temperature": 0.1,
                        "max_tokens": 2000,
                        "top_p": 0.9
                    },
                    "system_prompt": "You are a junior data analyst.",
                    "capabilities": ["data_analysis"],
                    "limitations": ["limited_experience"]
                }
                
                # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
                agent_config = self.template_manager.create_agent_from_template(
                    "junior_analyst",
                    {"name": "Custom Junior Analyst"}
                )
                
                self.console.print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞!")
                self.console.print(f"   üìù –ò–º—è: {agent_config.name}")
                self.console.print(f"   üéØ –†–æ–ª—å: {agent_config.role}")
                self.console.print(f"   üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(agent_config.capabilities)}")
                
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞: {e}", style="red")
    
    def show_role_manager_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ–ª–µ–π"""
        self.console.print("\n" + "="*80)
        self.console.print("üë• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –†–û–õ–ï–ô", style="bold blue")
        self.console.print("="*80)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏
        roles = list(self.role_manager.roles.keys())
        
        self.console.print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ ({len(roles)}):")
        
        role_table = Table()
        role_table.add_column("–†–æ–ª—å", style="cyan")
        role_table.add_column("–£—Ä–æ–≤–µ–Ω—å", style="green")
        role_table.add_column("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", style="yellow")
        role_table.add_column("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", style="magenta")
        
        for role_name in roles[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–æ–ª–µ–π
            role_info = self.role_manager.get_role_requirements(role_name)
            
            required_caps = ", ".join(role_info.get("required_capabilities", [])[:3])
            suggested_caps = ", ".join(role_info.get("suggested_capabilities", [])[:3])
            
            role_table.add_row(
                role_info.get("name", role_name),
                role_info.get("level", "unknown"),
                required_caps,
                suggested_caps
            )
        
        self.console.print(role_table)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–æ–ª–∏
        self.console.print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–æ–ª–∏ 'data_analyst':")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        test_config = AgentConfig(
            name="Test Analyst",
            role="Data Analyst",
            description="Test analyst",
            model={"provider": "openai", "model_name": "gpt-4"},
            system_prompt="You are a test analyst.",
            capabilities=["data_analysis", "basic_statistics"],  # –ï—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            limitations=[]
        )
        
        test_agent = UniversalAgent(test_config, "test-key")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        is_valid = self.role_manager.validate_agent_for_role(test_agent, "data_analyst")
        
        if is_valid:
            self.console.print("‚úÖ –ê–≥–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ–ª–∏ 'data_analyst'")
        else:
            self.console.print("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ–ª–∏ 'data_analyst'")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        improvements = self.role_manager.suggest_agent_improvements(test_agent, "data_analyst")
        
        if improvements:
            self.console.print("\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
            for improvement in improvements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                self.console.print(f"   ‚Ä¢ {improvement}")
        else:
            self.console.print("\n‚úÖ –ê–≥–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–æ–ª–∏")
    
    def show_agent_factory_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        self.console.print("\n" + "="*80)
        self.console.print("üè≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ô –§–ê–ë–†–ò–ö–ò –ê–ì–ï–ù–¢–û–í", style="bold blue")
        self.console.print("="*80)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã
        all_types = AgentFactory.get_available_agent_types()
        categories = ExtendedAgentFactory.get_agent_categories()
        
        self.console.print(f"\nüìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {len(all_types)}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
        demo_types = ["analyst", "database", "ml", "security", "devops"]
        
        base_config = AgentConfig(
            name="Factory Demo Agent",
            role="Demo Role",
            description="Demo Description",
            model={
                "provider": "openai",
                "model_name": "gpt-4",
                "temperature": 0.2,
                "max_tokens": 4000,
                "top_p": 0.9
            },
            system_prompt="You are a demo agent.",
            capabilities=["demo"],
            limitations=[]
        )
        
        self.console.print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É:")
        
        for agent_type in demo_types:
            try:
                with self.console.status(f"[bold green]–°–æ–∑–¥–∞–Ω–∏–µ {agent_type} –∞–≥–µ–Ω—Ç–∞..."):
                    agent = AgentFactory.create_agent(agent_type, base_config, "demo-key")
                    
                    self.console.print(f"   ‚úÖ {agent_type.title()} –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    self.console.print(f"      üìù –¢–∏–ø: {type(agent).__name__}")
                    
            except Exception as e:
                self.console.print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {agent_type} –∞–≥–µ–Ω—Ç–∞: {e}", style="red")
    
    def show_workflow_integration_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å workflow —Å–∏—Å—Ç–µ–º–æ–π"""
        self.console.print("\n" + "="*80)
        self.console.print("üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° WORKFLOW", style="bold blue")
        self.console.print("="*80)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤
        router_config = {
            "routing_strategies": {
                "sequential": {"enabled": True},
                "parallel": {"enabled": True},
                "conditional": {"enabled": True},
                "broadcast": {"enabled": True}
            },
            "default_strategy": "sequential",
            "timeout": 300,
            "max_retries": 3
        }
        
        try:
            router = AgentRouter(router_config, self.interaction_logger)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            agents = {}
            agent_types = ["analyst", "database", "ml", "security"]
            
            base_config = AgentConfig(
                name="Workflow Agent",
                role="Workflow Role",
                description="Workflow Description",
                model={
                    "provider": "openai",
                    "model_name": "gpt-4",
                    "temperature": 0.2,
                    "max_tokens": 4000,
                    "top_p": 0.9
                },
                system_prompt="You are a workflow agent.",
                capabilities=["workflow_processing"],
                limitations=[]
            )
            
            for agent_type in agent_types:
                try:
                    agent = AgentFactory.create_agent(agent_type, base_config, "demo-key")
                    agents[agent_type] = agent
                except Exception as e:
                    self.console.print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {agent_type} –∞–≥–µ–Ω—Ç–∞: {e}")
            
            if agents:
                self.console.print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è workflow")
                
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
                self.console.print("\nüõ£Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_message = {
                    "content": "Analyze this data and provide security recommendations",
                    "sender": "user",
                    "recipients": list(agents.keys()),
                    "priority": "high"
                }
                
                with self.console.status("[bold green]–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ workflow..."):
                    # –ú–æ–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    self.console.print("   üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ workflow")
                    self.console.print("   üîÑ –ê–≥–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                    self.console.print("   üì• –ü–æ–ª—É—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤")
                    self.console.print("   ‚úÖ Workflow –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –≤ workflow –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}", style="red")
    
    def show_interactive_demo(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
        self.console.print("\n" + "="*80)
        self.console.print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø", style="bold blue")
        self.console.print("="*80)
        
        self.console.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        
        options = [
            ("1", "–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"),
            ("2", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–æ–ª–∏"),
            ("3", "–ü–æ–∫–∞–∑–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–ª–µ–π"),
            ("4", "–°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"),
            ("5", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é")
        ]
        
        for key, description in options:
            self.console.print(f"   {key}. {description}")
        
        while True:
            choice = Prompt.ask("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", choices=["1", "2", "3", "4", "5"])
            
            if choice == "1":
                self._interactive_template_creation()
            elif choice == "2":
                self._interactive_role_validation()
            elif choice == "3":
                self._interactive_role_hierarchy()
            elif choice == "4":
                self._interactive_custom_agent()
            elif choice == "5":
                break
    
    def _interactive_template_creation(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        templates = self.template_manager.list_templates()
        
        if not templates:
            self.console.print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
            return
        
        self.console.print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")
        for i, template_name in enumerate(templates, 1):
            template = self.template_manager.get_template(template_name)
            if template:
                self.console.print(f"   {i}. {template.name} ({template.base_type})")
        
        try:
            choice = int(Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞", choices=[str(i) for i in range(1, len(templates) + 1)]))
            template_name = templates[choice - 1]
            
            custom_name = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)")
            
            custom_config = {}
            if custom_name:
                custom_config["name"] = custom_name
            
            with self.console.status("[bold green]–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞..."):
                agent_config = self.template_manager.create_agent_from_template(template_name, custom_config)
                
                self.console.print(f"‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.console.print(f"   üìù –ò–º—è: {agent_config.name}")
                self.console.print(f"   üéØ –†–æ–ª—å: {agent_config.role}")
                self.console.print(f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {agent_config.description}")
                
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}", style="red")
    
    def _interactive_role_validation(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏"""
        roles = list(self.role_manager.roles.keys())
        
        self.console.print(f"\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:")
        for i, role_name in enumerate(roles[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            role_info = self.role_manager.get_role_requirements(role_name)
            self.console.print(f"   {i}. {role_info.get('name', role_name)} ({role_info.get('level', 'unknown')})")
        
        try:
            choice = int(Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏", choices=[str(i) for i in range(1, min(11, len(roles) + 1))]))
            role_name = roles[choice - 1]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            capabilities_input = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            capabilities = [cap.strip() for cap in capabilities_input.split(",") if cap.strip()]
            
            test_config = AgentConfig(
                name="Test Agent",
                role="Test Role",
                description="Test Description",
                model={"provider": "openai", "model_name": "gpt-4"},
                system_prompt="You are a test agent.",
                capabilities=capabilities,
                limitations=[]
            )
            
            test_agent = UniversalAgent(test_config, "test-key")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            is_valid = self.role_manager.validate_agent_for_role(test_agent, role_name)
            
            if is_valid:
                self.console.print(f"‚úÖ –ê–≥–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ–ª–∏ '{role_name}'")
            else:
                self.console.print(f"‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ–ª–∏ '{role_name}'")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            improvements = self.role_manager.suggest_agent_improvements(test_agent, role_name)
            if improvements:
                self.console.print("\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
                for improvement in improvements[:5]:
                    self.console.print(f"   ‚Ä¢ {improvement}")
                    
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}", style="red")
    
    def _interactive_role_hierarchy(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫–∞–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–æ–ª–µ–π"""
        roles = list(self.role_manager.roles.keys())
        
        self.console.print(f"\nüë• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:")
        for i, role_name in enumerate(roles[:10], 1):
            role_info = self.role_manager.get_role_requirements(role_name)
            self.console.print(f"   {i}. {role_info.get('name', role_name)}")
        
        try:
            choice = int(Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏", choices=[str(i) for i in range(1, min(11, len(roles) + 1))]))
            role_name = roles[choice - 1]
            
            hierarchy = self.role_manager.get_role_hierarchy(role_name)
            
            if hierarchy:
                self.console.print(f"\nüìà –ò–µ—Ä–∞—Ä—Ö–∏—è –¥–ª—è —Ä–æ–ª–∏ '{role_name}':")
                for i, next_role in enumerate(hierarchy, 1):
                    self.console.print(f"   {i}. {next_role}")
            else:
                self.console.print(f"\nüìà –î–ª—è —Ä–æ–ª–∏ '{role_name}' –Ω–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏")
                
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}", style="red")
    
    def _interactive_custom_agent(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        self.console.print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:")
        
        try:
            name = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞")
            role = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞")
            description = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
            
            capabilities_input = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            capabilities = [cap.strip() for cap in capabilities_input.split(",") if cap.strip()]
            
            custom_config = AgentConfig(
                name=name,
                role=role,
                description=description,
                model={
                    "provider": "openai",
                    "model_name": "gpt-4",
                    "temperature": 0.2,
                    "max_tokens": 4000,
                    "top_p": 0.9
                },
                system_prompt=f"You are a {role}.",
                capabilities=capabilities,
                limitations=[]
            )
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent = UniversalAgent(custom_config, "demo-key")
            
            self.console.print(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.console.print(f"   üìù –ò–º—è: {agent.config.name}")
            self.console.print(f"   üéØ –†–æ–ª—å: {agent.config.role}")
            self.console.print(f"   üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(agent.config.capabilities)}")
            
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}", style="red")
    
    def show_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        self.console.print("\n" + "="*80)
        self.console.print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ò–¢–ï–†–ê–¶–ò–ò ‚Ññ4", style="bold blue")
        self.console.print("="*80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        all_agent_types = AgentFactory.get_available_agent_types()
        categories = ExtendedAgentFactory.get_agent_categories()
        templates = self.template_manager.list_templates()
        roles = list(self.role_manager.roles.keys())
        
        summary_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4")
        summary_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        summary_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        summary_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="yellow")
        
        summary_table.add_row(
            "–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤",
            str(len(all_agent_types)),
            "–ë–∞–∑–æ–≤—ã–µ + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã"
        )
        summary_table.add_row(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –∞–≥–µ–Ω—Ç–æ–≤",
            str(len(categories)),
            "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
        )
        summary_table.add_row(
            "–î–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤",
            str(len(templates)),
            "–®–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"
        )
        summary_table.add_row(
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π",
            str(len(roles)),
            "–†–æ–ª–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –∏–µ—Ä–∞—Ä—Ö–∏–µ–π"
        )
        
        self.console.print(summary_table)
        
        # –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        self.console.print("\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4:")
        features = [
            "‚úÖ 10 –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤",
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è",
            "‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
            "‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤",
            "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤",
            "‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤",
            "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å workflow —Å–∏—Å—Ç–µ–º–æ–π",
            "‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"
        ]
        
        for feature in features:
            self.console.print(f"   {feature}")
        
        self.console.print("\nüöÄ –ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ4 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            self.show_welcome()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            self.show_agent_overview()
            self.show_extended_agents_demo()
            self.show_template_system_demo()
            self.show_role_manager_demo()
            self.show_agent_factory_demo()
            self.show_workflow_integration_demo()
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å
            if Confirm.ask("\nüéÆ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é?"):
                self.show_interactive_demo()
            
            self.show_summary()
            
        except KeyboardInterrupt:
            self.console.print("\n\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            self.console.print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}", style="red")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4...")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    demo = Iteration4Demo()
    demo.run_demo()


if __name__ == "__main__":
    main() 