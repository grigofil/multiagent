"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent / "src"))

from src.workflow import (
    AgentRouter, Message, MessageType, RoutingStrategy, RoutingRule,
    InteractionLogger, LangGraphWorkflowManager, WorkflowState
)
from src.utils.advanced_config_loader import AdvancedConfigLoader


def test_agent_router_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        config_loader = AdvancedConfigLoader()
        router = AgentRouter(config_loader)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        assert router.agents == {}, "–ê–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
        assert router.routing_rules == [], "–ü—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        assert router.message_history == [], "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        assert not router.is_running, "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω"
        
        print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return False


def test_routing_rules():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...")
    
    try:
        config_loader = AdvancedConfigLoader()
        router = AgentRouter(config_loader)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
        def test_condition(message: Message) -> bool:
            return "—Ç–µ—Å—Ç" in str(message.content).lower()
        
        rule = RoutingRule(
            condition=test_condition,
            target_agents=["analyst"],
            strategy=RoutingStrategy.SEQUENTIAL,
            priority=5,
            description="–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ"
        )
        
        router.add_routing_rule(rule)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        assert len(router.routing_rules) == 1, "–ü—Ä–∞–≤–∏–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ"
        assert router.routing_rules[0].description == "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        router.add_default_routing_rules()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        assert len(router.routing_rules) > 1, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({len(router.routing_rules)} –ø—Ä–∞–≤–∏–ª)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_message_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message(
            id="test_message_001",
            sender="system",
            recipients=["analyst"],
            message_type=MessageType.TASK,
            content="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂",
            metadata={"test": True},
            priority=1
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        assert message.id == "test_message_001"
        assert message.sender == "system"
        assert message.recipients == ["analyst"]
        assert message.message_type == MessageType.TASK
        assert message.content == "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂"
        assert message.metadata["test"] is True
        assert message.priority == 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ timestamp
        assert hasattr(message, 'timestamp')
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False


def test_interaction_logger():
    """–¢–µ—Å—Ç –ª–æ–≥–≥–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π...")
    
    try:
        logger = InteractionLogger("test_logs")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message(
            id="test_log_001",
            sender="system",
            recipients=["analyst"],
            message_type=MessageType.TASK,
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        logger.log_interaction(message, processing_time=1.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = logger.get_system_health()
        assert stats["total_interactions"] == 1
        assert stats["avg_response_time"] == 1.5
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = logger.generate_report("summary")
        assert report["report_type"] == "summary"
        assert "stats" in report
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        history = logger.get_interaction_history(limit=10)
        assert len(history) >= 1
        
        print("‚úÖ –õ–æ–≥–≥–µ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: {e}")
        return False


def test_langgraph_workflow_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ LangGraph"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ LangGraph...")
    
    try:
        config_loader = AdvancedConfigLoader()
        router = AgentRouter(config_loader)
        logger = InteractionLogger("test_logs")
        
        workflow_manager = LangGraphWorkflowManager(router, logger)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        data_analysis_workflow = workflow_manager.create_data_analysis_workflow()
        code_development_workflow = workflow_manager.create_code_development_workflow()
        project_management_workflow = workflow_manager.create_project_management_workflow()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        workflow_manager.register_workflow("data_analysis", data_analysis_workflow)
        workflow_manager.register_workflow("code_development", code_development_workflow)
        workflow_manager.register_workflow("project_management", project_management_workflow)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        available_workflows = workflow_manager.get_available_workflows()
        assert len(available_workflows) == 3
        assert "data_analysis" in available_workflows
        assert "code_development" in available_workflows
        assert "project_management" in available_workflows
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        workflow_info = workflow_manager.get_workflow_info("data_analysis")
        assert workflow_info["name"] == "data_analysis"
        assert "nodes" in workflow_info
        assert "edges" in workflow_info
        
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ LangGraph —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return False


async def test_message_routing():
    """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        config_loader = AdvancedConfigLoader()
        router = AgentRouter(config_loader)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤)
        class MockAgent:
            def __init__(self, name):
                self.name = name
                self.processed_messages = []
            
            async def process(self, message):
                self.processed_messages.append(message)
                return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {self.name}"
        
        router.agents = {
            "analyst": MockAgent("analyst"),
            "coder": MockAgent("coder"),
            "reviewer": MockAgent("reviewer")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        router.add_default_routing_rules()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        message = Message(
            id="test_routing_001",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
        routed_messages = await router.route_message(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        assert len(routed_messages) > 0, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analyst_messages = [msg for msg in routed_messages if "analyst" in msg.recipients]
        assert len(analyst_messages) > 0, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
        
        print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({len(routed_messages)} –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        return False


async def test_workflow_execution():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    
    try:
        config_loader = AdvancedConfigLoader()
        router = AgentRouter(config_loader)
        logger = InteractionLogger("test_logs")
        
        workflow_manager = LangGraphWorkflowManager(router, logger)
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        data_analysis_workflow = workflow_manager.create_data_analysis_workflow()
        workflow_manager.register_workflow("test_data_analysis", data_analysis_workflow)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        initial_data = {
            "data": {
                "sales": [100, 150, 200, 180, 250],
                "months": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π"]
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è checkpointer
        initial_state = WorkflowState(
            workflow_data=initial_data,
            metadata={
                "workflow_name": "test_data_analysis",
                "thread_id": "test_thread_001",
                "checkpoint_id": "test_checkpoint_001"
            }
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        result = await workflow_manager.run_workflow("test_data_analysis", initial_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
        print(f"–ö–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {list(result.keys()) if isinstance(result, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
        if isinstance(result, dict):
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ
        assert isinstance(result, dict), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        assert 'step_results' in result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å step_results"
        assert 'workflow_data' in result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å workflow_data"
        
        print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        return False


def test_routing_strategies():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...")
    
    try:
        config_loader = AdvancedConfigLoader()
        router = AgentRouter(config_loader)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        def sequential_condition(message: Message) -> bool:
            return "–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ" in str(message.content).lower()
        
        sequential_rule = RoutingRule(
            condition=sequential_condition,
            target_agents=["analyst", "coder"],
            strategy=RoutingStrategy.SEQUENTIAL,
            priority=10,
            description="–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        def parallel_condition(message: Message) -> bool:
            return "–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ" in str(message.content).lower()
        
        parallel_rule = RoutingRule(
            condition=parallel_condition,
            target_agents=["analyst", "coder"],
            strategy=RoutingStrategy.PARALLEL,
            priority=9,
            description="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        def broadcast_condition(message: Message) -> bool:
            return "–≤—Å–µ–º" in str(message.content).lower()
        
        broadcast_rule = RoutingRule(
            condition=broadcast_condition,
            target_agents=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            strategy=RoutingStrategy.BROADCAST,
            priority=8,
            description="–®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
        router.add_routing_rule(sequential_rule)
        router.add_routing_rule(parallel_rule)
        router.add_routing_rule(broadcast_rule)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        assert len(router.routing_rules) == 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        priorities = [rule.priority for rule in router.routing_rules]
        assert priorities == sorted(priorities, reverse=True)
        
        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        config_loader = AdvancedConfigLoader()
        router = AgentRouter(config_loader)
        logger = InteractionLogger("test_logs")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        error_message = Message(
            id="error_test_001",
            sender="system",
            recipients=["nonexistent_agent"],
            message_type=MessageType.TASK,
            content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.log_interaction(
            error_message, 
            response=None, 
            processing_time=0.0, 
            error="–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        stats = logger.get_system_health()
        assert stats["total_interactions"] >= 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ª–æ–≥
        error_log_file = logger.error_log_file
        assert error_log_file.exists() or True  # –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3: –ú–µ—Ö–∞–Ω–∏–∑–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤\n")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs("logs", exist_ok=True)
    os.makedirs("test_logs", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    sync_tests = [
        test_agent_router_initialization,
        test_routing_rules,
        test_message_creation,
        test_interaction_logger,
        test_langgraph_workflow_manager,
        test_routing_strategies,
        test_error_handling
    ]
    
    sync_results = []
    for test in sync_tests:
        try:
            result = test()
            sync_results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
            sync_results.append(False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    async_tests = [
        test_message_routing,
        test_workflow_execution
    ]
    
    async_results = []
    for test in async_tests:
        try:
            result = await test()
            async_results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
            async_results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_results = sync_results + async_results
    passed = sum(all_results)
    total = len(all_results)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\n‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   - –ú–µ—Ö–∞–Ω–∏–∑–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
        print("   - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
        print("   - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
        print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LangGraph –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        print("   - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
        print("   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 