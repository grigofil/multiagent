"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import os
from dotenv import load_dotenv
from loguru import logger
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

from src.workflow import MultiAgentWorkflow
from src.workflow import AgentRouter, InteractionLogger, LangGraphWorkflowManager, Message, MessageType, RoutingRule, RoutingStrategy
from src.utils import ConfigLoader, get_api_key
from src.utils.advanced_config_loader import AdvancedConfigLoader
from src.prompts import PromptTemplates

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/multiagent.log", rotation="1 day", retention="7 days")

console = Console()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print(Panel.fit("ü§ñ –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", style="bold blue"))
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        config_loader = ConfigLoader()
        advanced_config_loader = AdvancedConfigLoader()
        api_key = get_api_key()
        
        if not api_key:
            console.print("[red]‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY[/red]")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        workflow_manager = MultiAgentWorkflow(config_loader, api_key)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3
        agent_router = AgentRouter(advanced_config_loader, api_key)
        interaction_logger = InteractionLogger("logs")
        langgraph_workflow_manager = LangGraphWorkflowManager(agent_router, interaction_logger)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        await show_system_info(workflow_manager, advanced_config_loader, agent_router, langgraph_workflow_manager)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        await run_examples(workflow_manager, agent_router, langgraph_workflow_manager, interaction_logger)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")


async def show_system_info(workflow_manager: MultiAgentWorkflow, advanced_config_loader: AdvancedConfigLoader, agent_router: AgentRouter, langgraph_workflow_manager: LangGraphWorkflowManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    console.print("\n[bold green]üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:[/bold green]")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–∞—Ö
    agents_info = workflow_manager.get_agents_info()
    agents_table = Table(title="ü§ñ –ê–≥–µ–Ω—Ç—ã")
    agents_table.add_column("ID", style="cyan")
    agents_table.add_column("–ò–º—è", style="green")
    agents_table.add_column("–†–æ–ª—å", style="yellow")
    agents_table.add_column("–ú–æ–¥–µ–ª—å", style="magenta")
    agents_table.add_column("–®–∞–±–ª–æ–Ω", style="blue")
    
    for agent_id, info in agents_info.items():
        agents_table.add_row(
            agent_id,
            info["name"],
            info["role"],
            info["model"]["model_name"],
            info.get("prompt_template", "–ù–µ—Ç")
        )
    
    console.print(agents_table)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞–≥–µ–Ω—Ç–æ–≤
    capabilities_table = Table(title="üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤")
    capabilities_table.add_column("–ê–≥–µ–Ω—Ç", style="cyan")
    capabilities_table.add_column("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", style="green")
    capabilities_table.add_column("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", style="yellow")
    
    for agent_id in agents_info.keys():
        capabilities = advanced_config_loader.get_agent_capabilities(agent_id)
        limitations = advanced_config_loader.get_agent_limitations(agent_id)
        capabilities_table.add_row(
            agent_id,
            ", ".join(capabilities[:3]) + ("..." if len(capabilities) > 3 else ""),
            ", ".join(limitations[:2]) + ("..." if len(limitations) > 2 else "")
        )
    
    console.print(capabilities_table)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
    providers = advanced_config_loader.get_supported_providers()
    providers_table = Table(title="üîå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    providers_table.add_column("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", style="cyan")
    providers_table.add_column("–ú–æ–¥–µ–ª–∏", style="green")
    
    for provider in providers:
        models = advanced_config_loader.get_provider_models(provider)
        providers_table.add_row(
            provider,
            ", ".join(models[:3]) + ("..." if len(models) > 3 else "")
        )
    
    console.print(providers_table)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    templates = PromptTemplates.list_templates()
    templates_table = Table(title="üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤")
    templates_table.add_column("–®–∞–±–ª–æ–Ω", style="cyan")
    templates_table.add_column("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", style="green")
    
    for template_name in templates:
        template = PromptTemplates.get_template(template_name)
        templates_table.add_row(
            template_name,
            ", ".join(template.variables)
        )
    
    console.print(templates_table)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
    workflows = workflow_manager.get_available_workflows()
    workflows_table = Table(title="üîÑ –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
    workflows_table.add_column("ID", style="cyan")
    workflows_table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green")
    workflows_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="yellow")
    
    for workflow_id in workflows:
        info = workflow_manager.get_workflow_info(workflow_id)
        workflows_table.add_row(
            workflow_id,
            info["name"],
            info["description"]
        )
    
    console.print(workflows_table)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3
    console.print("\n[bold green]üîÑ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ3:[/bold green]")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–µ
    router_stats = agent_router.get_stats()
    router_table = Table(title="üì° –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤")
    router_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
    router_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    
    router_table.add_row("–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", str(router_stats["messages_processed"]))
    router_table.add_row("–°–æ–æ–±—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", str(router_stats["messages_routed"]))
    router_table.add_row("–û—à–∏–±–æ–∫", str(router_stats["errors"]))
    router_table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{router_stats['avg_processing_time']:.2f}—Å")
    router_table.add_row("–ü—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏", str(len(agent_router.routing_rules)))
    
    console.print(router_table)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LangGraph —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
    langgraph_workflows = langgraph_workflow_manager.get_available_workflows()
    langgraph_table = Table(title="üîÑ LangGraph —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
    langgraph_table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan")
    langgraph_table.add_column("–£–∑–ª—ã", style="green")
    langgraph_table.add_column("–£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã", style="yellow")
    
    for workflow_name in langgraph_workflows:
        info = langgraph_workflow_manager.get_workflow_info(workflow_name)
        langgraph_table.add_row(
            workflow_name,
            str(len(info.get("nodes", []))),
            "–î–∞" if info.get("has_conditional_edges", False) else "–ù–µ—Ç"
        )
    
    console.print(langgraph_table)


async def run_examples(workflow_manager: MultiAgentWorkflow, agent_router: AgentRouter, langgraph_workflow_manager: LangGraphWorkflowManager, interaction_logger: InteractionLogger):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    console.print("\n[bold green]üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤:[/bold green]")
    
    # –ü—Ä–∏–º–µ—Ä 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    console.print("\n[bold blue]üìà –ü—Ä–∏–º–µ—Ä 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö[/bold blue]")
    data_analysis_data = {
        "data_input": {
            "sales": [100, 150, 200, 180, 250],
            "months": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π"],
            "target": 200
        }
    }
    
    result = await workflow_manager.run_workflow("data_analysis_workflow", data_analysis_data)
    
    if result["success"]:
        console.print("[green]‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ[/green]")
        console.print(f"[yellow]–†–µ–∑—É–ª—å—Ç–∞—Ç:[/yellow] {result['context'].get('analysis_result', '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')[:200]}...")
    else:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}[/red]")
    
    # –ü—Ä–∏–º–µ—Ä 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ–≤—å—é –∫–æ–¥–∞
    console.print("\n[bold blue]üíª –ü—Ä–∏–º–µ—Ä 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ–≤—å—é –∫–æ–¥–∞[/bold blue]")
    code_task_data = {
        "task_description": "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"
    }
    
    result = await workflow_manager.run_workflow("code_review_workflow", code_task_data)
    
    if result["success"]:
        console.print("[green]‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ–≤—å—é –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ[/green]")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à–∞–≥–∞–º
        for message in result["messages"]:
            console.print(f"\n[cyan]–®–∞–≥ {message['step']} - {message['agent']}:[/cyan]")
            console.print(f"[yellow]–í—Ö–æ–¥:[/yellow] {str(message['input'])[:100]}...")
            console.print(f"[green]–í—ã—Ö–æ–¥:[/green] {str(message['output'])[:200]}...")
    else:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}[/red]")
    
    # –ü—Ä–∏–º–µ—Ä 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ3)
    console.print("\n[bold blue]üì° –ü—Ä–∏–º–µ—Ä 3: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ3)[/bold blue]")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    class MockAgent:
        def __init__(self, name):
            self.name = name
            self.processed_messages = []
        
        async def process(self, message):
            self.processed_messages.append(message)
            return f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {self.name}"
    
    agent_router.agents = {
        "analyst": MockAgent("analyst"),
        "coder": MockAgent("coder"),
        "reviewer": MockAgent("reviewer")
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    agent_router.add_default_routing_rules()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = [
        Message(
            id="msg_001",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª"
        ),
        Message(
            id="msg_002",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞"
        ),
        Message(
            id="msg_003",
            sender="system",
            recipients=[],
            message_type=MessageType.TASK,
            content="–ü—Ä–æ–≤–µ–¥–∏ —Ä–µ–≤—å—é –∫–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        )
    ]
    
    for message in messages:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        interaction_logger.log_interaction(
            message=message,
            response=None,
            processing_time=0.0,
            error=None
        )
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        routed_messages = await agent_router.route_message(message)
        
        console.print(f"\n[cyan]–°–æ–æ–±—â–µ–Ω–∏–µ:[/cyan] {message.content[:50]}...")
        console.print(f"[green]–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫:[/green] {[msg.recipients for msg in routed_messages]}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for routed_msg in routed_messages:
            interaction_logger.log_interaction(
                message=routed_msg,
                response=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {routed_msg.recipients[0] if routed_msg.recipients else 'unknown'}",
                processing_time=0.1,
                error=None
            )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = interaction_logger.get_system_health()
    console.print(f"\n[green]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:[/green]")
    console.print(f"–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {stats['total_interactions']}")
    console.print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['avg_processing_time']:.2f}—Å")
    console.print(f"–û—à–∏–±–æ–∫: {stats['error_count']}")
    
    # –ü—Ä–∏–º–µ—Ä 4: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LangGraph —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ3)
    console.print("\n[bold blue]üîÑ –ü—Ä–∏–º–µ—Ä 4: LangGraph —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å (–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ3)[/bold blue]")
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    data_analysis_workflow = langgraph_workflow_manager.create_data_analysis_workflow()
    langgraph_workflow_manager.register_workflow("demo_data_analysis", data_analysis_workflow)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    demo_data = {
        "data": {
            "sales": [120, 180, 220, 190, 280],
            "months": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π"]
        }
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    result = await langgraph_workflow_manager.run_workflow("demo_data_analysis", demo_data)
    
    if isinstance(result, dict) and 'step_results' in result:
        console.print("[green]‚úÖ LangGraph —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ[/green]")
        console.print(f"[yellow]–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤:[/yellow] {len(result['step_results'])}")
        
        for step, result_text in result['step_results'].items():
            console.print(f"  [cyan]{step}:[/cyan] {result_text}")
    else:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ LangGraph —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ[/red]")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4
    console.print("\n[bold blue]üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–¢–ï–†–ê–¶–ò–ò ‚Ññ4[/bold blue]")
    console.print("="*80)
    
    try:
        from demo_iteration4 import Iteration4Demo
        demo4 = Iteration4Demo()
        demo4.run_demo()
    except ImportError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–µ–º–æ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4: {e}[/red]")
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ4: {e}[/red]")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ5
    console.print("\n[bold blue]üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–¢–ï–†–ê–¶–ò–ò ‚Ññ5[/bold blue]")
    console.print("="*80)
    
    try:
        from demo_iteration5 import Iteration5Demo
        demo5 = Iteration5Demo()
        await demo5.run_demo()
    except ImportError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–µ–º–æ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ5: {e}[/red]")
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –ò—Ç–µ—Ä–∞—Ü–∏–∏ ‚Ññ5: {e}[/red]")


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs("logs", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main()) 